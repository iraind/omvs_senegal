# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/06_utils.time.ipynb.

# %% auto 0
__all__ = ['ForecastTimeHandler']

# %% ../../nbs/06_utils.time.ipynb 3
import pandas as pd
import xarray as xr

# %% ../../nbs/06_utils.time.ipynb 5
class ForecastTimeHandler:
    """
    A utility class for handling forecast time transformations.

    This class provides functionality to manipulate forecast time between different formats,
    specifically handling the conversion between columnar forecast horizons and stacked time series formats.
    It manages forecast horizons (e.g., 't+1', 't+2') and their corresponding timestamps.
    """
    def __init__(
            self,
            run_time_col_name: str = "run_time", # Name of the time index that represent the time from which the forecast is made
            stack_col_name: str = "pred" # Name of the column when columns are stacked
            ):
        self.stack_col_name = stack_col_name
        self.run_time_col_name = run_time_col_name

    def stack(self, df: pd.DataFrame) -> pd.DataFrame:
        """Stack the forecast horizon as index and add forecast time as index"""
        df = df.copy()
        if df.columns.name is None:
            df.columns.name = "forecast_horizon"
        df = self.transpose_forecast_horizon_as_index(df)
        df = self.add_forecast_time_as_index(df)
        return df
    
    def transpose_forecast_horizon_as_index(self, df: pd.DataFrame) -> pd.DataFrame:
        df=df.stack()
        df = df.to_frame(self.stack_col_name)
        return df

    def add_forecast_time_as_index(self, df: pd.DataFrame) -> pd.DataFrame:
        def get_daily_timedeltas(forecast_horizons):
            """Extract timedelta day values from forecast horizons starting with 't+'"""
            return [pd.Timedelta(days=int(fh.replace("t+", ""))) for fh in forecast_horizons if fh.startswith('t+')]
        df = df.copy()
        forecast_horizon = df.index.get_level_values("forecast_horizon")
        timedeltas = get_daily_timedeltas(forecast_horizon)
        df["forecast_time"] = df.index.get_level_values(self.run_time_col_name) + pd.Index(timedeltas)
        df.set_index("forecast_time", inplace=True, append=True)
        return df
    
    def unstack(self, df: pd.DataFrame) -> pd.DataFrame:
        """Convert stacked forecast horizon index back to horizon-as-columns format"""
        return df.reset_index("forecast_time", drop=True)[self.stack_col_name].unstack("forecast_horizon")
    
    def align(self, pred, obs, stack_pred=False):
        """Align the predictions and observations by forecast time"""
        obs, pred = obs.copy(), pred.copy()
        if stack_pred:
            pred = self.stack(pred)
        obs_index_name = obs.index.name
        obs.index.name = "forecast_time"
        pred, obs = pred.align(obs, join="outer", axis=0)
        obs.index.name = obs_index_name
        return pred, obs
    
    def join(self, pred, obs, stack_pred=False):
        """Join the predictions and observations by forecast time"""
        obs, pred = obs.copy(), pred.copy()
        if stack_pred:
            pred = self.stack(pred)
        obs.index.name = "forecast_time"
        return pred.join(obs, on="forecast_time")

    def align_as_xarray(self, pred, obs):
        """Align the predictions and observations by forecast horizon and return as xarray"""
        if 1 != len(obs.columns):
            raise ValueError("Observations must have only one column")
        obs_col = obs.columns[0]
        pred_col = self.stack_col_name

        obs, pred = obs.copy(), pred.copy()
        pred = self.stack(pred)
        obs.index.name = "forecast_time"
        pred, obs = self.align(pred, obs)

        self.stack_col_name = obs_col
        obs = self.unstack(obs)
        obs = obs.to_xarray().to_array("forecast_horizon", name=obs_col)
        self.stack_col_name = pred_col
        pred = self.unstack(pred)
        pred = pred.to_xarray().to_array("forecast_horizon", name=pred_col)
        
        return pred, obs
    
    def join_as_xarray(self, pred, obs):
        """Align the predictions and observations by forecast horizon and join them as xarray"""
        pred, obs = self.align_as_xarray(pred, obs)
        return xr.merge([pred, obs])

