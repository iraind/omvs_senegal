"""A module for creating advanced time series features and targets including sliding windows and polynomial transformations"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_dataprep.features.ipynb.

# %% auto 0
__all__ = ['FeatureAndTargetGenerator']

# %% ../../nbs/01_dataprep.features.ipynb 3
import pandas as pd
from sklearn.preprocessing import PolynomialFeatures

# %% ../../nbs/01_dataprep.features.ipynb 4
class FeatureAndTargetGenerator:
    """
    Transforms time series data into feature matrices suitable for machine learning models.
    Creates lagged features using a sliding window and optionally generates polynomial features
    to capture non-linear relationships between variables. It also creates a target vector for
    the number of timesteps to predict.
    """
    def __init__(self, 
                 context_len: int = 10, # number of previous timesteps to use as features
                 target_len: int = 10, # number of timesteps to predict
                 poly_degree: int = 1 # degree of polynomial features
                 ):
        self.context_len = context_len
        self.target_len = target_len
        self.poly_features = PolynomialFeatures(degree=poly_degree)
        
    def generate(self, df: pd.DataFrame, x_col: list[str], y_col: list[str]) -> tuple[pd.DataFrame, pd.DataFrame]:
        """ Generates a feature matrix and target vector from the input data. """
        X, y = df[x_col], df[y_col]
        if 1 < self.poly_features.degree:
            X = pd.DataFrame(self.poly_features.fit_transform(X), index=X.index)
        X, y = self._generate_sliding_window_data(X, y)
        return X, y


    def _generate_sliding_window_data(self, X: pd.DataFrame, y: pd.DataFrame) -> tuple[pd.DataFrame, pd.DataFrame]:
        """
        Creates a feature matrix by combining multiple input variables and their lagged values.
        For each time step t, takes values from t-context_len to t for each input variable
        and combines them into a single feature vector. The target values are taken from t+1 to t+target_len.
        This allows the model to learn patterns across multiple timesteps and predict multiple steps ahead.
        """
        features = []
        targets = []
        
        for i in range(len(X) - self.context_len - self.target_len):
            row_features = X.iloc[i:i + self.context_len]
            features.append(row_features.values.reshape(-1))
            row_targets = y.iloc[i + self.context_len: i + self.context_len + self.target_len]
            targets.append(row_targets.values.reshape(-1))

        features = pd.DataFrame(
            index=X.index[self.context_len - 1:len(X) - self.target_len - 1],
              data=features)
        targets = pd.DataFrame(
            index=y.index[self.context_len - 1:len(X) - self.target_len - 1],
            data=targets,
            columns=[f"t+{i+1}" for i in range(0, self.target_len)])
        return features, targets
    

